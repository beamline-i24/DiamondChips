 ;Author: 	Lee Hudson and Robin Owen	
;Descripton:	Scan up or down through a city block
;wait for a trigger at each position
; M1 is trigger if using BNC1
;31 is down block. 32 is up block
;41 is down column. 42 is up column
;51 is wait for trigger high then DWELL
;52 is wait for trigger low then DWELL 
;101 is EQU4 output to low
;102 is EQU4 output to high 
;Setup
#DEFINE PROGRAM_NO 11
#DEFINE GLOBAL_ACC    	P(100 * PROGRAM_NO + 1)
#DEFINE GLOBAL_S_CURVE	P(100 * PROGRAM_NO + 2)
#DEFINE X_VEL         	P(100 * PROGRAM_NO + 3)
#DEFINE Y_VEL	        P(100 * PROGRAM_NO + 4)
#DEFINE Z_VEL	        P(100 * PROGRAM_NO + 5)
#DEFINE X_ACC	        P(100 * PROGRAM_NO + 6)
#DEFINE Y_ACC	        P(100 * PROGRAM_NO + 7)
#DEFINE Z_ACC	        P(100 * PROGRAM_NO + 8) 
#DEFINE X_COUNTER	    P(100 * PROGRAM_NO + 9)
#DEFINE Y_COUNTER	    P(100 * PROGRAM_NO + 10)
#DEFINE X_NUM_STEPS	    P(100 * PROGRAM_NO + 11)
#DEFINE Y_NUM_STEPS	    P(100 * PROGRAM_NO + 12)
#DEFINE X_STEP_SIZE   	P(100 * PROGRAM_NO + 13)
#DEFINE Y_STEP_SIZE	    P(100 * PROGRAM_NO + 14)
#DEFINE DWELL_TIME    	P(100 * PROGRAM_NO + 15)
#DEFINE X_START	        P(100 * PROGRAM_NO + 16)       
#DEFINE Y_START	        P(100 * PROGRAM_NO + 17)       
#DEFINE Z_START	        P(100 * PROGRAM_NO + 18)
#DEFINE PATHTYPE        P(100 * PROGRAM_NO + 19)
#DEFINE X_NUM_BLOCKS    P(100 * PROGRAM_NO + 20)
#DEFINE Y_NUM_BLOCKS    P(100 * PROGRAM_NO + 21)
#DEFINE X_BLOCK_COUNTER P(100 * PROGRAM_NO + 22)
#DEFINE Y_BLOCK_COUNTER P(100 * PROGRAM_NO + 23)
#DEFINE X_BLOCK_SIZE  	P(100 * PROGRAM_NO + 24)
#DEFINE Y_BLOCK_SIZE    P(100 * PROGRAM_NO + 25)
#DEFINE COLTYPE         P(100 * PROGRAM_NO + 26)

M408 = 100            ;set up triggering
M409 = 150            ;set up triggering
M412 = 0 M411 = 1     ; ensures trigger is low

DEL GAT	              ; Erase any defined gather buffer
&2	                  ; Coordinate System 2
CLOSE	                ; Make sure all buffers are closed
OPEN PROG PROGRAM_NO	; Open buffer for program entry
CLEAR	                ; Erase existing contents of buffer
LINEAR                ; Blended linear interpolation move mode
ABS                   ; absolute mode - moves specified by position
TA(GLOBAL_ACC)        ; Set 1/2 sec (500 mspec acceleration time)
TS(GLOBAL_S_CURVE)    ; Set no S-curve acceleration time
GLOBAL_ACC = 1
GLOBAL_S_CURVE = 0
X_VEL = 20
Y_VEL = 20
Z_VEL = 20
X_COUNTER = 0 
Y_COUNTER = 1
X_BLOCK_COUNTER = 1
Y_BLOCK_COUNTER = 1
;For testing use the below. Comment out for running remotely.
;X_START = 0
;Y_START = 0
;Z_START = 0
;X_STEP_SIZE = 0.125 ; spacing of features with a block
;Y_STEP_SIZE = 0.125
;X_NUM_STEPS = 12    ; number of columns in a city block
;Y_NUM_STEPS = 12    ; number of rows in a city block
;DWELL_TIME = 17
;PATHTYPE = 31
;X_NUM_BLOCKS = 9
;Y_NUM_BLOCKS = 9
;X_BLOCK_SIZE = 2.2
;Y_BLOCK_SIZE = 2.5
;COLTYPE = 41


F(X_VEL) F(Y_VEL) F(Z_VEL) ;Start of motion program
X(X_START) Y(Y_START) Z(Z_START)
DWELL0

;Always run a down column first
COLTYPE = 41
;Run alternate column types

WHILE (X_BLOCK_COUNTER < X_NUM_BLOCKS+1)
    IF (COLTYPE = 41) GOSUB41
    IF (COLTYPE = 42) GOSUB42   
    
    IF (COLTYPE = 41) COLTYPE = 42
    ELSE COLTYPE = 41
    X_START = X_START + X_BLOCK_SIZE
    X_BLOCK_COUNTER = X_BLOCK_COUNTER + 1
    
ENDWHILE

RETURN


N31  ;Starts top right. Ends bottom right
WHILE(Y_COUNTER < Y_NUM_STEPS/2+1)
	WHILE(X_COUNTER < X_NUM_STEPS -1)
		GOSUB51
		GOSUB102 
		X_COUNTER = X_COUNTER + 1
		X(X_START + (X_COUNTER*X_STEP_SIZE))
		GOSUB101
	ENDWHILE
	GOSUB51
	GOSUB102
	Y(Y_START + ((2*Y_COUNTER-1)*Y_STEP_SIZE))
	GOSUB101
	WHILE(X_COUNTER > 0)
		GOSUB51
		GOSUB102
		X(X_START+((X_COUNTER-1)*X_STEP_SIZE))
		X_COUNTER = X_COUNTER - 1
		GOSUB101
	ENDWHILE
	GOSUB51
	GOSUB102
	Y(Y_START+(2*Y_COUNTER*Y_STEP_SIZE))
	GOSUB101
	Y_COUNTER = Y_COUNTER + 1
ENDWHILE
X_COUNTER = 0
Y_COUNTER = 1
RETURN

N32 ;Starts bottom right. Ends top right
WHILE(Y_COUNTER < Y_NUM_STEPS/2+1)
	WHILE(X_COUNTER < X_NUM_STEPS-1)
		GOSUB51
		GOSUB102
		X_COUNTER = X_COUNTER + 1
		X(X_START + (X_COUNTER*X_STEP_SIZE))
		GOSUB101
	ENDWHILE
	GOSUB51
	GOSUB102
	Y(Y_START - ((2*Y_COUNTER-1)*Y_STEP_SIZE))
	GOSUB101
	WHILE(X_COUNTER > 0)
		GOSUB51
		GOSUB102
		X(X_START+((X_COUNTER-1)*X_STEP_SIZE))
		X_COUNTER = X_COUNTER - 1
		GOSUB101
	ENDWHILE
	GOSUB51
	GOSUB102
	Y(Y_START-(2*Y_COUNTER*Y_STEP_SIZE))
	GOSUB101
	Y_COUNTER = Y_COUNTER + 1
ENDWHILE
X_COUNTER = 0
Y_COUNTER = 1
RETURN

N41 ; Run a down column of X_NUM_BLOCKS 

WHILE(Y_BLOCK_COUNTER < Y_NUM_BLOCKS+1)
    GOSUB102
    X(X_START) Y(Y_START) Z(Z_START)
    GOSUB101
    GOSUB31
    Y_BLOCK_COUNTER = Y_BLOCK_COUNTER + 1
    IF (Y_BLOCK_COUNTER = Y_NUM_BLOCKS+1) Y_START = Y_START + (Y_NUM_STEPS-1)*Y_STEP_SIZE
    ELSE Y_START = Y_START + Y_BLOCK_SIZE
ENDWHILE
Y_BLOCK_COUNTER = 1
RETURN

N42 ;Run an up column of X_NUM_BLOCKS
WHILE(Y_BLOCK_COUNTER < Y_NUM_BLOCKS+1)
    GOSUB102
    X(X_START) Y(Y_START) Z(Z_START)
    GOSUB101
    GOSUB32
    Y_BLOCK_COUNTER = Y_BLOCK_COUNTER + 1
    IF (Y_BLOCK_COUNTER = Y_NUM_BLOCKS+1) Y_START = Y_START - (Y_NUM_STEPS-1)*Y_STEP_SIZE
    ELSE Y_START = Y_START - Y_BLOCK_SIZE
ENDWHILE
Y_BLOCK_COUNTER = 1
RETURN

N51 ;Wait for trigger to change to high
  WHILE (M1=0) WAIT
  DWELL(DWELL_TIME)
RETURN

N52 ;Wait for trigger to change to low
  WHILE (M1=1) WAIT
  DWELL(DWELL_TIME)
RETURN

;Trigger low routine. Triggers EQU4 pin 4
N101                   
  M412 = 0 M411 = 1    ; trigger low
RETURN

;Trigger high routine. Triggers EQU4 pin 4
N102                   
  M412 = 1  M411 = 1   ; trigger high 
RETURN

CLOSE ; close program
